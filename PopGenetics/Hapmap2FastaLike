#!/usr/bin/perl

=head1 NAME

 Hapmap2FastaLike
 Tool to change Hapmap format to Fasta like compatible

=cut

=head1 SYPNOSIS

 Hapmap2FastaLike [-h] -i <hapmap_inputfile> -o <fasta_outputfile>
                       -r <reference> [-B] [-L|-N] [-M|-H] [-d <distance_snps>]
                       [-P|-C]

=head2 I<Flags:>

=over


=item -i

B<hapmap_inputfile>       hapmap input file (mandatory)

=item -o

B<fasta_outputfile>       fasta-like output filename (mandatory)

=item -r

B<reference_name>         reference name for biallelic markers

=item -B

B<biallelic_filter>       filter out the non biallelic genotypes.

=item -L

B<logic_output>           use logic (0, 1) genotypes for output

=item -N

B<numeric_output>         use numeric (-9,1,2,4,8) genotypes for output.

=item -M

B<collapse_haplotypes>    collapse haplotypes and use IUPAC

=item -H

B<get_homozygous>         get the homozygous positions only

=item -d

B<distance_snps>          filter snps closer than this distance

=item -P

B<Phase_output>           print the output in Phase format

=item -C

B<Chromopainter_output>   print the output in Chromopaimnter format

=item -V

B<be_verbose>             be verbose and print the parsing status.

=item -h

B<help>                   print the help

=back

=cut

=head1 DESCRIPTION

 This script trasforms a hapmap file into a Fasta-like format
 (One individual/haplotype per line)

 Hapmap format is a tabular format file with the following columns:
  C1:   rs#
  C2:   alleles
  C3:   chrom
  C4:   pos
  C5:   strand
  C6:   assembly
  C7:   center
  C8:   protLSID
  C9:   assyLSID	
  C10:  panelLSID	
  C11:  QCcode	
  C12+: Genotypes

 Fasta-like file will be file with the following lines:
  L1 (Odd lines): >ID
  L2 (Even lines): SNPs

 If -P (phase format, incompatible with -M) is used:
  L1:  number of individuals
  L2:  number of SNPs
  L3:  positions (P pos1 pos2) ... for more than one chromosome it will divided
       in diferent files.
  L4:  S line (one S per marker)
  L5:  ID1
  L6:  genotypes (1-a)
  L7:  genotypes (1-b)
  .... (and 3 more lines per indiv.)

 If -C (chromopainter format, incompatible with -M) is used:
  L1:  number of donors (0)
  L2:  number of individuals (as (diploids_ind*2)/2)
  L3:  number of SNPs
  L3:  positions (P pos1 pos2) ... for more than one chromosome it will divided
       in diferent files.
  L4:  S line (one S per marker)
  L5:  genotypes (1-a)
  L6:  genotypes (1-b)
  ... (and 3 more line per indiv.)

  Example hapmap:
  C1     C2   C3    C4    C5  C6  C7  C8  C9  C10  C11  S1  S2  S3
  MRK01  A/T  Chr5  1000  +   NA  NA  NA  NA  NA   NA   AA  TT  AA 
  MRK02  C/T  Chr5  2000  +   NA  NA  NA  NA  NA   NA   CC  CC  CT 
  MRK03  C/G  Chr5  3000  +   NA  NA  NA  NA  NA   NA   CC  GG  CG 

  Example Fasta (default)
  >S1-1 
  ACC
  >S1-2
  ACC
  >S2-1 
  TCG
  >S2-2
  TCG
  >S3-1
  ACC
  >S3-2
  ATG

  Example Fasta (-M)
  >S1 
  ACC
  >S2 
  TCG
  >S3
  AYS

  Example Phase (-P)
  3
  3
  P 1000 2000 3000
  SSS
  #S1 
  ACC
  ACC
  #S2 
  TCG
  TCG
  #S3
  ACC
  ATG

  Example Chromopainter (-C)
  0
  3
  3
  P 1000 2000 3000
  SSS
  ACC
  ACC 
  TCG
  TCG
  ACC
  ATG

  
  Genotypes may be used as logic -L (0|1), numeric -N (N=-9, A=1, C=2, G=4 
  and T=8, or sum of these values for degenerated SNPs), or character (default) 
  (A,T,C,G).

  Example Fasta (-L)
  >S1-1 
  000
  >S1-2
  000
  >S2-1
  101
  >S2-2
  101
  >S3-1
  000
  >S3-2
  011

  Example Fasta (-N)
  >S1-1 
  122
  >S1-2
  122
  >S2-1
  824
  >S2-2
  824
  >S3-1
  122
  >S3-2
  184

  Biallelic (-B) option filter the non-biallelic SNPs. By default it will
  take the first SNP from the alleles column as reference, but a sample name
  can be specified as a reference using the option -r <reference>  


=cut

=head1 AUTHORS

  Aureliano Bombarely Gomez.
  (ab782@cornell.edu).

=cut

=head1 METHODS

 Hapmap2FastaLike


=cut

use strict;
use warnings;
use autodie;

use Getopt::Std;
use List::Util 'shuffle';

our ($opt_i, $opt_o, $opt_r, $opt_B, $opt_L, $opt_N, $opt_M, $opt_H, $opt_d, 
     $opt_P, $opt_C, $opt_V, $opt_h);
getopts("i:o:r:BLNMHd:PCVh");
if (!$opt_i && !$opt_o && !$opt_r && !$opt_B && !$opt_L && !$opt_N && !$opt_M
    && !$opt_H && !$opt_d && !$opt_P && !$opt_C && !$opt_V && !$opt_h) {
    print "There are n\'t any tags. Print help\n\n";
    help();
}
if ($opt_h) {
    help();
}

my $date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## Hapmap2FastaLike Starts ($date)  ##\n";
print STDERR "############################################################\n\n";

print_header("0) Checking arguments");

##############################################################################
## CHECK ARGUMENTS
##############################################################################

## Get the arguments and check them

my $input = $opt_i || 
    die("INPUT ARG. ERROR: -i <hapmap_input> argument was not supplied.\n");

print STDERR "\tInput file: $input\n";

my $output = $opt_o ||
    die("INPUT ARG. ERROR: -o <fasta_output> argument was not supplied.\n");

print STDERR "\tOutput file: $output\n";
    
my $refname = '';
if ($opt_r) {

    $refname = $opt_r;
    print STDERR "\tRef.name [enabled]: $refname\n";
}
if ($opt_B) {

    print STDERR "\tBiallelic filter [enabled]\n";
}
if ($opt_L && $opt_N) {

    die("ERROR: Only one of the parameters -L or -N can be used.\n");
}
elsif ($opt_L) {

    unless ($opt_r) {
    
	die("ERROR: -L only can be used if is specified a reference -r.\n");
    }

    print STDERR "\tLogic genotype output [enabled]\n";
}
elsif ($opt_N) {

    print STDERR "\tNumeric genotype output [enabled]\n";
}

if ($opt_M && $opt_H) {

    die("ERROR: Only one of the parameters -M or -H can be used.\n");
}
elsif ($opt_M) {

    print STDERR "\tHaplotype collapsing [enabled]\n";
}
elsif ($opt_H) {

     print STDERR "\tFilter heterozygous postions [enabled]\n";
}
if ($opt_P) {

    print STDERR "\tOutput type [Phase]\n";
}
elsif ($opt_C) {
    
    print STDERR "\tOutput type [Chromopainter]\n";
}
else {

    print STDERR "\tOutput type [Fasta]\n";
}


my %numeric = (
    A => 1,
    C => 2,
    G => 4,
    T => 8,
    R => 5,
    Y => 10,
    S => 6,
    W => 9,
    K => 12,	
    M => 3,
    B => 14,	
    D => 13,
    H => 11,
    V => 7,
    N => -9,	
    '.' => -9,
    '-' => -9,
    );

my %iupac = (
    A    => 'A',
    C    => 'C',
    G    => 'G',
    T    => 'T',
    AG   => 'R',
    CT   => 'Y',
    CG   => 'S',
    AT   => 'W',
    GT   => 'K', 
    AC   => 'M', 
    CGT  => 'B', 
    AGT  => 'D',
    ACT  => 'H',
    ACG  => 'V',
    ACGT => 'N',
    
);



my %invnumeric = ();
foreach my $nt (keys %numeric) {
    $invnumeric{$numeric{$nt}} = $nt;
}

###############################################################################
## PARSE THE HAPMAP
###############################################################################
## The data will be stored with this structure:
##
## $markerloc{$chrom} = { $id => $pos };
## $markergen{$genot} = { $id => \@genotypes }; 
## $markerref{$id} = $genotype
###############################################################################

print_header("1) Parsing Hapmap input file");

my ($mloc_href, $mgen_href, $mref_href) = parse_hapmap($input);

my %mloc = %{$mloc_href};
my %mgen = %{$mgen_href};
my %mref = %{$mref_href};

my $nmrks = scalar(keys %mref);
print STDERR "\t$nmrks makers have been extracted from the hapmap file.\n";

## Order the markers by position and filter according -d

print_header("2) Order markers and filter by distance");

my %chr_markers = sort_markers(\%mloc, $opt_d);


###############################################################################
## PRODUCE THE OUTPUT
###############################################################################

print_header("3) Filtering and Printing Output");

## Three different outputs
## $opt_P and $opt_C will print one file per chromosome


my $ofh;

## Open one filehandle if -P and -C are not enabled

unless ($opt_P || $opt_C) {

    open $ofh, '>', $output;
}

## Fasta will join the genotypes

my %fastagenotypes = ();

foreach my $chr (sort keys %chr_markers) {

    my @markers = @{$chr_markers{$chr}};

    ## If -P or -C are enabled open here a specific filehandle

    if ($opt_P || $opt_C) {

	open $ofh, '>', $chr . '_' . $output;

	## Print the headers

	my $indv_count = scalar(keys %mgen);
	my $mark_count = scalar(@markers);

	if ($opt_C) {
	
	    print $ofh "0\n";
	}
	print $ofh "$indv_count\n$mark_count\n";

	## It needs the P position

	my @pos = ('P');
	my @sline = ();

	foreach my $pmark (@markers) {
	
	    push @pos, $mloc{$chr}->{$pmark};
	    push @sline, 'S';
	}

	print $ofh join(" ", @pos) . "\n";
	print $ofh join(" ", @sline) . "\n";
    }

    foreach my $ind (sort keys %mgen) {

	## Define genotype array. It will contain one arrayref
	## per haplotype except when -M is used.

	my @genotypes = ();

	## Now it will define if it need to collapse the genotypes 
	## using -M

	my $m = 0; ## Marker counter

	foreach my $mid (@markers) {
    	    
	    my $single_genotype = callsingle($mgen{$ind}->{$mid});
	    my $single_ref;
	    if ($refname) {
		
		$single_ref = callsingle($mgen{$refname}->{$mid});
	    }
	    
	    ## Check if it is a heterozygous position
	    ## Ignore any marker when -H is enabled and it has more than one
	    ## polymorphism per position (for example CT).

	    unless ($opt_H && length($single_genotype) > 1) {

		## Change the genotype according IUPAC if it is need it

		if ($opt_M) {
	    
		    my $call = $iupac{$single_genotype};

		    if ($opt_N) {
		    		    
			$call = $numeric{$iupac{$single_genotype}};
		    }
		    elsif ($opt_L) {
		
			if ($single_genotype eq $single_ref) {
		    
			    $call = 1;
			}
			else {
		    
			    $call = 0;
			}		
		    }

		    if ($m == 0) {
		    
			push @genotypes, [$call];
		    }
		    else {
		    
			push @{$genotypes[0]}, $call;
		    }		
		}
		else {                    ## If it doesnt need to collapse 
		    

		    my @alleles = @{$mgen{$ind}->{$mid}};
		    
		    my $a = 0;
		    foreach my $allele (@alleles) {
		    
			my $call = $allele;

			if ($opt_N) {

			    $call = $numeric{$allele};
			}
			elsif ($opt_L) {
		
			    ## To compare with the reference it will assume
			    ## that the data is phased

			    my $allele_ref = $mgen{$refname}->{$mid}->[$a];

			    if ($allele eq $allele_ref) {
				
				$call = 1;
			    }
			    else {
				
				$call = 0;
			    }		
			}

			if ($m == 0) {
		    
			    push @genotypes, [$call];
			}
			else {
			    
			    push @{$genotypes[$a]}, $call;
			}		    
		    
			$a++;
		    }
		}
	    }

	    $m++;
	}

	## At this point there is an array with the genotypes

	if ($opt_P) {
	
	    print $ofh "#$ind\n";
	    foreach my $genoline (@genotypes) {
	    
		print $ofh join("", @{$genoline}) . "\n";
	    }
	}
	elsif ($opt_C) {
	    
	    foreach my $genoline (@genotypes) {
	    
		print $ofh join("", @{$genoline}) . "\n";
	    }
	}
	else {
	
	    if (scalar(@genotypes) > 1 && !$opt_H) {
	    
		my $hp = 0;
		foreach my $genoline (@genotypes) {
		    
		    $hp++;
		    my $seqid = $ind . '_' . $hp;
		    if (exists $fastagenotypes{$seqid}) {
		    			
			$fastagenotypes{$seqid} .= join("", @{$genoline});
		    }
		    else {

			$fastagenotypes{$seqid} = join("", @{$genoline});
		    }
		}
	    }
	    else {
	    
		if (exists $fastagenotypes{$ind}) {
		    			
		    $fastagenotypes{$ind} .= join("", @{$genotypes[0]});
		}
		else {
		    
		    $fastagenotypes{$ind} = join("", @{$genotypes[0]});
		}
	    }
	}
    }
}

if (scalar(keys %fastagenotypes) > 0) {

    foreach my $seqid (sort keys %fastagenotypes) {
    
	print $ofh ">$seqid\n$fastagenotypes{$seqid}\n";    
    }
}



$date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## Hapmap2FastaLike Ends ($date)   ##\n";
print STDERR "############################################################\n\n";
exit;


=head2 help

  Usage: help()
  Desc: print help of this script
  Ret: none
  Args: none
  Side_Effects: exit of the script
  Example: if (!@ARGV) {
               help();
           }

=cut

sub help {
  print STDERR <<EOF;
  $0:

    Description:
      
      This script trasforms a hapmap file into a Fasta-like format
      (One individual/haplotype per line)

      Hapmap format is a tabular format file with the following columns:
       C1:   rs#
       C2:   alleles
       C3:   chrom
       C4:   pos
       C5:   strand
       C6:   assembly
       C7:   center
       C8:   protLSID
       C9:   assyLSID	
       C10:  panelLSID	
       C11:  QCcode	
       C12+: Genotypes

      Fasta-like file will be file with the following lines:
       L1 (Odd lines): >ID
       L2 (Even lines): SNPs

      If -P (phase format, incompatible with -M) is used:
       L1:  number of individuals
       L2:  number of SNPs
       L3:  positions (P pos1 pos2) ... for more than one chromosome it will 
            divided in diferent files.
       L4:  S line (one S per marker)
       L5:  ID1
       L6:  genotypes (1-a)
       L7:  genotypes (1-b)
       .... (and 3 more lines per indiv.)

      If -C (chromopainter format, incompatible with -M) is used:
       L1:  number of donors (0)
       L2:  number of individuals (as (diploids_ind*2)/2)
       L3:  number of SNPs
       L3:  positions (P pos1 pos2) ... for more than one chromosome it will 
           divided in diferent files.
       L4:  S line (one S per marker)
       L5:  genotypes (1-a)
       L6:  genotypes (1-b)
       ... (and 3 more line per indiv.)

      Example hapmap:
       C1     C2   C3    C4    C5  C6  C7  C8  C9  C10  C11  S1  S2  S3
       MRK01  A/T  Chr5  1000  +   NA  NA  NA  NA  NA   NA   AA  TT  AA 
       MRK02  C/T  Chr5  2000  +   NA  NA  NA  NA  NA   NA   CC  CC  CT 
       MRK03  C/G  Chr5  3000  +   NA  NA  NA  NA  NA   NA   CC  GG  CG 

      Example Fasta (default)
       >S1-1 
       ACC
       >S1-2
       ACC
       >S2-1 
       TCG
       >S2-2
       TCG
       >S3-1
       ACC
       >S3-2
       ATG

      Example Fasta (-M)
       >S1 
       ACC
       >S2 
       TCG
       >S3
       AYS

      Example Phase (-P)
       3
       3
       P 1000 2000 3000
       SSS
       #S1 
       ACC
       ACC
       #S2 
       TCG
       TCG
       #S3
       ACC
       ATG

      Example Chromopainter (-C)
       0
       3
       3
       P 1000 2000 3000
       SSS
       ACC
       ACC 
       TCG
       TCG
       ACC
       ATG

  
      Genotypes may be used as logic -L (0|1), numeric -N (N=-9, A=1, C=2, G=4 
      and T=8, or sum of these values for degenerated SNPs), or character  
      (default) (A,T,C,G).

      Example Fasta (-L)
       >S1-1 
       000
       >S1-2
       000
       >S2-1
       101
       >S2-2
       101
       >S3-1
       000
       >S3-2
       011

      Example Fasta (-N)
       >S1-1 
       122
       >S1-2
       122
       >S2-1
       824
       >S2-2
       824
       >S3-1
       122
       >S3-2
       184

      Biallelic (-B) option filter the non-biallelic SNPs. By default it will
      take the first SNP from the alleles column as reference, but a sample name
      can be specified as a reference using the option -r <reference>  
       

    Usage:

      Hapmap2FastaLike [-h] -i <hapmap_inputfile> -o <fasta_outputfile>
                       -r <reference> [-B] [-L|-N] [-M|-H] [-d <distance_snps>]
                       [-P|-C]

    Flags:

      -i <hapmap_inputfile>       hapmap input file (mandatory)
      -o <fastalike_outputfile>   fasta like output filename (mandatory)
      -r <reference_name>         reference name for biallelic markers
      -B <biallelic_filter>       filter out the non biallelic genotypes.
      -L <logic_output>           use logic (0, 1) genotypes for output
      -N <numeric_output>         use numeric (-9,1,2,4,8) genotypes for output.
      -M <collapse_haplotypes>    collapse haplotypes and use IUPAC
      -H <get_homozygous>         get the homozygous positions only
      -d <distance_snps>          filter snps closer than this distance
      -P <Phase_output>           print the output in Phase format
      -C <Chromopainter_output>   print the output in Chromopaimnter format
      -V <be_verbose>             be verbose and print the parsing status
      -h <help>                   print the help


EOF
exit (1);
}

=head2 print_header

  Usage: print_head("Message");

  Desc: print a section head

  Ret: None

  Args: Message to print in the header

  Side_Effects: None

  Example: print_head("Step1: This is a test");

=cut

sub print_header {
    my $message = shift;

    my $date = `date`;
    chomp($date);

    print STDERR "\n";
    print STDERR "============================================================";
    print STDERR "\n $message ($date)\n";
    print STDERR "============================================================";
    print STDERR "\n\n";
}

=head2 parse_hapmap

  Usage: my ($mloc_href, $mgen_href) = parse_hapmap($input);

  Desc: Parse a hapmap file and returns two hashrefs.

  Ret: $mloc_href, a hash ref. with key=$chrom and value={$id => $pos }; 
       $mgen_href, a hash ref. with key=$genot and value={$id => \@genotypes };
       $mref_href, a hash ref. with key=$id and value=$ref_allele 

  Args: $input, a filename
        $refname, a reference name

  Side_Effects: Die if something is wrong.
                It takes the refname from $opt_r

  Example: my ($mloc_href, $mgen_href) = parse_hapmap($input);

=cut

sub parse_hapmap {
    my $in = shift ||
	die("ERROR: No inputfile was supplied to parse_hapmap function.\n");

    ## Define the variables

    my %loc = ();
    my %gen = ();
    my %ref = ();

    ## First open the file

    open my $ifh, '<', $in;

    my ($H, $h, $bi) = (0,0,0);
    if ($opt_V) {
    
	$H = `cut -f1 $in | wc -l`;
	chomp($H);
    }

    my %manfields = (
	'rs#'       => 1,	
	'alleles'   => 2,	
	'chrom'	    => 3,
	'pos'	    => 4,
	'strand'    => 5,	
	'assembly'  => 6,	
	'center'    => 7,	
	'protLSID'  => 8,	
	'assyLSID'  => 9,	
	'panelLSID' => 10,	
	'QCcode'    => 11
	);
    my $mancnt = scalar(keys %manfields);
   
    my @headers = ();
    my %smpf = ();
    my %smpr = ();

    while(<$ifh>) {
	
	chomp($_);
	$h++;
    
	
	if ($_ =~ m/^rs#/) {
	
	    my $f = 0;
	    foreach my $head (split(/\t/, $_)) {
	    
		$f++;
		if ($f > 0 && $f < 12) {
		
		    unless (exists $manfields{$head}) {
		    
			my @mfields = sort {$manfields{$a} <=> $manfields{$b}} 
			keys %manfields;
			my $mfline = join(",", @mfields);
			die("ERROR: wrong header field $head isnt ($mfline)\n");
		    }
		}
		else {
		
		    $smpf{$head} = $f;
		    $smpr{$f} = $head;
		}
	    }

	    if ($opt_r) {
	    
		unless (exists $smpf{$opt_r}) {
		
		    die("ERROR: Reference name doesnt exist in the header.\n");
		}
	    }

	    if ($opt_V) {
	    
		my $samplecnt = scalar(keys %smpf);
		print STDERR "\n\t$samplecnt genoypes have been found in the ";
		print STDERR " hapmap file:\n\n";
		foreach my $smp (sort {$smpf{$a} <=> $smpf{$b}} keys %smpf) {
		    
		    print STDERR "\t\t$smp\n";
		}
		print STDERR "\n\n";
	    }
	}
	else {
	
	    my ($mkid, $alle, $chro, $posi, $stra, $asse, $cent, $prot, 
		$assy, $pane, $qcco, @geno) = split(/\t/, $_);
	
	    ## First check the biallelic filter

	    my @alleles = split(/\//, $alle);

	    ## By default it will take as reference the first allele

	    $ref{$mkid} = $alleles[0];

	    unless ($opt_B && scalar(@alleles) > 2) { 

		## Add the location information

		if (exists $loc{$chro}) {
	    
		    $loc{$chro}->{$mkid} = $posi;
		}
		else {
	    
		    $loc{$chro} = { $mkid => $posi };
		}
	    
		## Add the genotype information

		my $g = 0;
		foreach my $gn (sort {$a <=> $b} keys %smpr) {
		
		    my @genotype = split(//, uc($geno[$g]));

		    if ($opt_r && $smpr{$gn} eq $opt_r) {
			
			$ref{$mkid} = $genotype[0];
		    }
		
		    if (exists $gen{$smpr{$gn}}) {
			    
			$gen{$smpr{$gn}}->{$mkid} = \@genotype;
		    }
		    else {
			
			$gen{$smpr{$gn}} = { $mkid => \@genotype };
		    }
		    
		    $g++;
		}
	    }
	    else {
	    
		$bi++;
	    }
	}    
	
	if ($opt_V) {
	
	    print STDERR "\tParsing line: $h of $H                   \r";
	}	    
    }

    if ($opt_V) {
	
	print STDERR "\n\n";
    }
    
    if ($opt_B) {
    
	print STDERR "\t$bi markers discarded by biallelic filter\n\n";
    }

    return (\%loc, \%gen, \%ref);
}


=head2 sort_markers

  Usage: my @markers = sort_markers(\%marks, $distance);

  Desc: Sort markers and filter by distance

  Ret: An array with arrayref with markers IDs

  Args: \%marks, a hashref with key=chromosome, value=hashref with id, position

  Side_Effects: None

  Example: my @markers = sort_markers(\%marks, $distance);

=cut

sub sort_markers {
    my $mrks_href = shift ||
	die("ERROR: No marks_href variable was supplied to sort_markers()\n");
    my $dist = shift;

    if (ref($mrks_href) ne 'HASH') {
    
	die("ERROR: $mrks_href supplied to sort_markers() isnt hashref.\n");
    }

    my %mloc = %{$mrks_href};
    my %mrks = ();

    my $mrks_count = 0;

    foreach my $chr (sort keys %mloc) {

	my @chr_mrks = ();

	my %mrks_c = %{$mloc{$chr}};

	my $n = 0;

	foreach my $mrk_id (sort { $mrks_c{$a} <=> $mrks_c{$b} } keys %mrks_c) {
    		    
	    if ($dist) {
		
		if ($n == 0) {

		    push(@chr_mrks, $mrk_id);
		    $mrks_count++;
		}
		else {
		    
		    my $diff = $mrks_c{$mrk_id} - $mrks_c{$chr_mrks[-1]};
		    if ($diff > $dist) {
			
			push(@chr_mrks, $mrk_id);
			$mrks_count++;
		    }
		}
	    }
	    else {
	
		push(@chr_mrks, $mrk_id);
		$mrks_count++;
	    }
	    
	    $n++;
	}

	$mrks{$chr} = \@chr_mrks;
    }

    print STDERR "\t$mrks_count markers have been selected\n";

    return %mrks;
}

=head2 callsingle

  Usage: my $single = callsingle(\@genotypes);

  Desc: Reduce the genotypes to non-redundant call, for example:
        AA => A, AT => AT, AACC => AC, ACCT => ACT...

  Ret: An scalar with the SNP

  Args: \@genotypes, an arrayref with the genotypes

  Side_Effects: None

  Example:  my $single = callsingle(\@genotypes);

=cut

sub callsingle {

    my $geno_aref = shift ||
	die("ERROR: No genotypes arrayref variable was supplied to callsingle");

    if (ref($geno_aref) ne 'ARRAY') {
    
	die("ERROR: $geno_aref supplied to callsingle() isnt arrayref.\n");
    }

    my %dif = ();
    foreach my $allele (@{$geno_aref}) {
	
	$dif{$allele} = 1;
    }

    my $singeno = join("", sort(keys(%dif)));
    return $singeno;
}
