#!/usr/bin/perl

=head1 NAME

 RDS_GenomeExplorer
 Repeat Deep Space Explorer, a pipeline to characterize the repeat space

=cut

our $version = '0.1.0';

=head1 SYPNOSIS

 RDS_GenomeExplorer [-h] -i <input_filelist> -o <output_basedir> 
                         -c <config_file> [-C] [-V] [-v]

=head2 I<Flags:>

=over


=item -i

B<input_filelist>         input 5 columns file list (mandatory)

=item -o

B<output_basedir>         name of the output directory (mandatory)

=item -c

B<config_file>            configuration file (mandatory)

=item -C

B<print_config_template>  Print a configuration file template     

=item -V

B<be_verbose>             be verbose and print the parsing status.

=item -v

B<version>                print version

=item -h

B<help>                   print the help

=back

=cut

=head1 DESCRIPTION

 This program run several tools to analyze the repeat profile of a genome 
 based in unassembled short reads in several steps:

 Step 0: Filter known contaminants (e.g. chloroplast) (optional)
 Step 1: Get the stats of the input fastq input files.
 Step 2: Get the Kmer size distribution(s).
 Step 3: 
 Step 3: Annotate the de-novo repeats using RepeatMasker.
 Step 4: Get the repeat borders.
 Step 5: Map repeat border reads with the gene space fasta reference.
 Step 6: Construct repeat copies.
 Step 7: Estimate age of the repeats.
 Step 8: Build summary report. 

 Input file is a file with 5 columns:
  -c1: sample_name
  -c2: file
  -c3: pair (permited values: S=Single, F=Forward, R=Reverse)
  -c4: insert_size
  -c5: sd_insert_size

 The following programs have to be in the PATH or be set up with enviromental
 variable.

 - BCalm2 ($BCALM2_PATH) (http://www.)
 - Repeatmasker ($REPMASKER_PATH) (http://www.repeatmasker.org/).
 - BWA ($BWA_PATH) (http://bio-bwa.sourceforge.net/).
 - Samtools ($SAMTOOLS_PATH) (http://samtools.sourceforge.net/).
 - Jellyfish ($JELLYFISH_PATH) (http://www.cbcb.umd.edu/software/jellyfish/).
 - Fastq-stats ($FASTQSTATS_PATH) (https://github.com/ExpressionAnalysis/).
 - Bedtools ($BEDTOOLS_PATH) (http://bedtools.readthedocs.io/en/latest/)

 Additionally the program will need BioPerl and the requeriments of the
 mentioned programs (e.g. RMBlast for Repeatmasker).

 

 The program will produce a file: "03_2_RepDenovoAnnotated.txt" with the 
 following columns (N depends of the number of groups):
   1- RepeatID (based in the REPdenovo analysis)
   2- RepeatClass (based in the RepeatMasker annotation)
   3- RepeatLength
   Na- Sample_CvMean (Mean coverage based in the REPdenovo analysis) 
   Nb- Sample_BPKM (Bases per 1Kb repeat size per 1M reads)
   Nc- Sample_EstCp (Estimated number of copies in the genome) 

=cut

=head1 AUTHORS

  Aureliano Bombarely.
  (aurebg@vt.edu).

=cut

=head1 METHODS

 RDS_GenomeExplorer


=cut

use strict;
use warnings;
use autodie;

use Getopt::Std;
use File::Spec;
use File::Basename;
use File::Copy;
use File::Path qw(make_path remove_tree);
use IPC::Cmd qw[can_run run];

use Bio::SeqIO;
use Math::BigFloat;

our ($opt_i, $opt_o, $opt_c, $opt_C, $opt_V, $opt_v, $opt_h);
getopts("i:o:c:CVvh");
if (!$opt_i && !$opt_o && !$opt_C && !$opt_V && !$opt_v && !$opt_h) {
    print "There are n\'t any tags. Print help\n\n";
    help();
}
if ($opt_h) {
    
    help();
}
elsif ($opt_v) {
    
    print STDERR "\nRDS_GenomeExplorer version:$version\n";
    print STDERR "Developed at the Bombarely Laboratory (2017-04-10)\n\n";
    exit(1);
}
elsif ($opt_C) {

    print_configfile();
    exit("\nConfiguration file has been created (RDS_GenomeExplorer.cfg)\n");
}

my $date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## RDS_GenomeExplorer Starts ($date) ##\n";
print STDERR "############################################################\n\n";

## Define a variable to keep the stats;

my %gstats = ();

print_header("0) Checking arguments");

##############################################################################
## CHECK ARGUMENTS
##############################################################################

## Get the arguments and check them

my $infile = $opt_i || 
    die("\nINPUT ARG. ERROR: -i <input_list> argument was not supplied.\n\n");
print STDERR "\tInput filename:\t$infile\n";

## Check that the input file has the right number of columns

my %infiles = parse_input_list($infile);
print_input_report(\%infiles);
    
my $outbase = $opt_o || 
    die("\nINPUT ARG. ERROR: -o <out_basename> argument was not supplied.\n\n");
print STDERR "\n\tOutput basename:\t$outbase\n";

my $config_file = $opt_c ||
    die("\nINPUT ARG. ERROR: -c <config_file> arg. was not supplied.\n\n");
print STDERR "\tConfiguration file:\t$config_file\n";

my %configparam = parse_configuration($config_file);
print_config_report(%configparam); 

## Check the executables

my %exepath = check_executables();


##############################################################################
## Create the output dir
##############################################################################

mkdir($outbase);






##############################################################################
## FINAL MESSAGE
##############################################################################

$date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## RepeatSpaceProfiler Ends ($date)   ##\n";
print STDERR "############################################################\n\n";
exit;


##############################################################################
##############################################################################
##
## FUNCTIONS
##
###############################################################################
## function to print the script help
###############################################################################

sub help {
  print STDERR <<EOF;
  $0:

   RDS_GenomeExplorer
   Pipeline to analyze the repeat profiling

   Usage:

     

    Description:
      
  
 
    Flags:

      -i <input_filelist>    input 5 columns file list (mandatory)
      -o <output_basedir>    name of the output directory (mandatory)
 
      -V <be_verbose>        be verbose and print the parsing status.
      -v <version>           print version
      -h <help>              print the help


EOF
exit (1);
}


##############################################################################
## Just a simple function to print a message with some format
##############################################################################

sub print_header {
    my $message = shift;

    my $date = `date`;
    chomp($date);

    print STDERR "\n";
    print STDERR "============================================================";
    print STDERR "\n $message ($date)\n";
    print STDERR "============================================================";
    print STDERR "\n\n";
}

###############################################################################
## check_executables
###############################################################################
## This function will use the PATH and the different ENV variables to check
## if the list of executables are available for this tool

sub check_executables {

    ## Executables are listed in this hash as specific PATH (keys) and 
    ## name of the command as array ref (values)

    my %exelist = (
	BCALM_PATH      => ['bcalm'],
	REPMASKER_PATH  => ['RepeatMasker'],
	BWA_PATH        => ['bwa'],
	SAMTOOLS_PATH   => ['samtools'],
	JELLYFISH_PATH  => ['jellyfish'],
	VELVET_PATH     => ['velveth'],
	FASTQSTATS_PATH => ['fastq-stats'],
	BEDTOOLS_PATH   => ['bedtools'],
	);

    ## Define the hash that it'll be fill with the executable path for these
    ## tools

    my %exepath = ();

    foreach my $exekey (sort(keys(%exelist))) {

	my @execitems = @{$exelist{$exekey}};
	foreach my $e_item (@execitems) {

	    if (exists $ENV{$exekey}) {

		## Print a message when the path is found for the executable
    
		print STDERR "\t$exekey PATH defined for $e_item executable\n";
		$exepath{$e_item} = File::Spec->catfile($ENV{$exekey}, $e_item);
	    }
	    else {

		## If no enviromental variable has been defined for the tool
		## check if it is in the PATH
    
		my $exepath = can_run($e_item);
		if ($exepath) {
		    
		    $exepath{$e_item} = $exepath;
		    print STDERR "\t$e_item is available for PATH ($exepath)\n";
		}
		else {
		    
		    ## If it is not found in the path either, just die

		    print STDERR "\nERROR: $e_item executable ($exekey ";
		    die("package) is not accessible.\n");
		}	   
	    }	
	}
    }
    
    return(%exepath);
}

##############################################################################
## parse_input_list
##############################################################################
##
## USAGE: my %infiles = parse_input_list($infile);
## DESCRIPTION: A function to parse the input files
## Input files are tabular files with the following columns
## -f1: sample_name (free) (e.g. Artha_COL)
## -f2: library_name (e.g. Artha_COL1)
## -f3: file_name (unique) (e.g. Artha_COL_R1.fq)
## -f4: library_type (S, PE, MP)
## -f5: library_file (S, F, R)
## -f6: insert_size (numeric)
## -f7: insert_size_sd (numeric)
##
## output hash structure will be:
## $SAMPLE_VALUE => { 
##        $LIB_NAME => { 
##             LIB_TYPE  => $LIB_TYPE_VALUE,
##             LIB_FILES => { $LIB_FILE_VALUE => $LIB_FILENAME },
##             LIB_STATS => { 
##                 INSERT_SIZE => $INSERT_SIZE_VALUE,
##                 INSERT_SIZE_SD => $INSERT_SIZE_SD_VALUE
##             }
##        }
##  }
##############################################################################

sub parse_input_list {

    my $file = shift(); 
    unless($file) {
    
	die("ERROR: No variable file was supplied to parse_input_list().\n\n");
    }

    my %perm_libtype = ( 'S' => 1, 'PE' => 2, 'MP' => 2 );
    my %perm_libfile = ( 'S' => 1, 'F'  => 1, 'R'  => 1 );

    my %infiles = ();
    my %filelist = (); 
    
    my $l = 0;
    open my $ifh, '<', $file;
    while(<$ifh>) {
    
	chomp($_);
	$l++;

	if ($_ =~ m/^.+/) {
	    my @cols = split(/\t/, $_);

	    unless (scalar(@cols) == 7) {
	
		die("PARSING ERROR: $file file, line $l dont have 7 columns\n");
	    }
	
	    my ($smp, $lib, $fname, $libtype, $libfile, $ins, $is_sd) = @cols;
	
	    ## Checks
	    ## 1- Is the file name unique?

	    if ($filelist{$fname}) {
	
		die("PARSING ERROR: filename:$fname is not unique.\n\n");
	    }
	    else {
		
		$filelist{$fname} = 1;
	    }
	    
	    ## 2- Does libtype have a permited value?
	    ## 3- Does lybfile have a permited value?

	    unless( exists $perm_libtype{$libtype} ) {
	
		die("PARSING ERROR: libtype=$libtype has non permited value\n");
	    }
	    unless( exists $perm_libfile{$libfile} ) {
	
		die("PARSING ERROR: libfile=$libfile has non permited value\n");
	    }

	    ## Add the info to the file

	    unless( exists $infiles{$smp} ) {
		
		$infiles{$smp} = {
		    $lib => {
			LIB_TYPE  => $libtype,
			LIB_FILES => { $libfile => $fname },
			LIB_STATS => { 
			    INSERT_SIZE    => $ins,
			    INSERT_SIZE_SD => $is_sd 
			}
		    }
		}
	    }
	    else {
	
		## Only the filename should be added, the rest of the 
		## information should be the same. The program will assume 
		## that it is the same

		unless ($infiles{$smp}->{$lib}) {
		
		    $infiles{$smp}->{$lib} = {
			LIB_TYPE  => $libtype,
			LIB_FILES => { $libfile => $fname },
			LIB_STATS => { 
			    INSERT_SIZE    => $ins,
			    INSERT_SIZE_SD => $is_sd 
			}
		    }
		}
		else {

		    $infiles{$smp}->{$lib}->{LIB_FILES}->{$libfile} = $fname;
		}
	    }
	}
    }
    return(%infiles); 
}

##############################################################################
## print_input_report
##############################################################################
##
## USAGE: print_input_report(\%infiles);
## DESCRIPTION: A function to print a report of the input files
##
##############################################################################

sub print_input_report {

    my $infile_href = shift;
    
    unless ($infile_href) {
    
	die("ERROR: No infiles href was suplied to print_input_report().\n"); 
    }

    my ($s, $tl) = (0, 0);
    
    foreach my $smp (sort keys %{$infile_href}) {
    
	$s++;
	my %libs = %{$infile_href->{$smp}};
	my $n = scalar(keys(%libs)); 
	my $l = 0;
	
	my $test = join(" ", values(%libs));

	print STDERR "\t- Sample $s: $smp with $n libraries\n";
	foreach my $lib (sort keys %libs) {

	    my $libtype = $libs{$lib}->{LIB_TYPE};
	    my $ins = $libs{$lib}->{LIB_STATS}->{INSERT_SIZE};
	    my $ins_sd = $libs{$lib}->{LIB_STATS}->{INSERT_SIZE_SD};

	    print STDERR "\n\t\tLibrary: $lib is a $libtype type library\n";
	    print STDERR "\t\tInsert_Size: $ins +/- $ins_sd\n";

	    foreach my $lf (sort(keys %{$libs{$lib}->{LIB_FILES}})) {

		my $filename = $libs{$lib}->{LIB_FILES}->{$lf};
		print STDERR "\t\t\t$lf => $filename\n";
	    }
	}
    }
} 

###############################################################################
## parse_configuration
###############################################################################
##
## USAGE: my %configparam = parse_configuration($config_file);
##
## The configuration file is a file with the following sections
## 00_global:
##   00_01_threads=(numeric)
##   00_02_chloroplast_seqfile=(file)
##   00_03_mitochondria_seqfile=(file)
##   00_04_contaminant_seqfile=(file)
##   00_05_estimated_genome_size=(file)
##   00_06_multikmer:
##     00_06_01_initial_kmer=(numeric)
##     00_06_02_steps_size=(numeric)
##     00_06_03_steps_number=(numeric)
##   00_07_kmers_filter:
##     00_07_01_kmer_error_cutoff=(numeric)
##     00_07_02_kmer_repeat_cutoff=(numeric)
## 01_jellyfish_args:
## 02_bcalm_args:
## 03_repeatmasker_args:


###############################################################################
## print_config_report
###############################################################################
## 
## USAGE: print_config_report(%configparam);


###############################################################################
## print_configfile()
###############################################################################
##
## USAGE: print_configfile()
## DESCRIPTION: print the configuration file
##

sub print_configfile {

    ## Define the sections into a hash
    my %config = ( 
	'00_global' => {
	    '00_01_threads'               => 'numeric',
	    '00_02_chloroplast_seqfile'   => 'file',
	    '00_03_mitochondria_seqfile'  => 'file',
	    '00_04_contaminant_seqfile'   => 'file',
	    '00_05_estimated_genome_size' => 'nucleotide_size',
	    '00_06_multikmer'             => {
		'00_06_01_initial_kmer'       => 'numeric',
		'00_06_02_steps_size'         => 'numeric',
		'00_06_03_steps_number'       => 'numeric',
	    },
	    '00_07_kmers_filter'          => {
		'00_07_01_kmer_error_cutoff'  => 'numeric',
		'00_07_02_kmer_repeat_cutoff' => 'numeric',
	    },
	},
	'01_jellyfish_args'    => {
	},
	'02_bcalm_args'        => {
	},
	'03_repeatmasker_args' => {
	},
	);

    ## Open the file to write the variables
    my $filename = "RDS_GenomeExplorer.cfg";
    open my $fh, '>', $filename;

    foreach my $k (sort(keys(%config))) {
    
	my %subcfg = %{$config{$k}};
	print $fh "$k:\n";
	
	foreach my $subk (sort(keys(%subcfg))) {
	
	    if (ref($subcfg{$subk}) eq "HASH") {
	    
		print $fh "\t$subk:\n";
		my %lv3cfg = %{$subcfg{$subk}};
		foreach my $lv3k (sort(keys(%lv3cfg))) {
		
		    print $fh "\t\t$lv3k [$lv3cfg{$lv3k}]=\n";
		}
	    }
	    else {
	    
		print $fh "\t$subk [$subcfg{$subk}]=\n";
	    }
	}    
    }
}
