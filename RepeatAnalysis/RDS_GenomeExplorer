#!/usr/bin/perl

=head1 NAME

 RDS_GenomeExplorer
 Repeat Deep Space Explorer, a pipeline to characterize the repeat space

=cut

our $version = '0.1.0';

=head1 SYPNOSIS

 RDS_GenomeExplorer [-h] -i <input_filelist> -o <output_basedir> 
                         -c <config_file> [-C] [-V] [-v]

=head2 I<Flags:>

=over


=item -i

B<input_filelist>         input 5 columns file list (mandatory)

=item -o

B<output_basedir>         name of the output directory (mandatory)

=item -c

B<config_file>            configuration file (mandatory)

=item -C

B<print_config_template>  Print a configuration file template     

=item -V

B<be_verbose>             be verbose and print the parsing status.

=item -v

B<version>                print version

=item -h

B<help>                   print the help

=back

=cut

=head1 DESCRIPTION

 This program run several tools to analyze the repeat profile of a genome 
 based in unassembled short reads in several steps:

 Step 0: Filter known contaminants (e.g. chloroplast) (optional)
 Step 1: Get the stats of the input fastq input files.
 Step 2: Get the Kmer size distribution(s).
 Step 3: 
 Step 3: Annotate the de-novo repeats using RepeatMasker.
 Step 4: Get the repeat borders.
 Step 5: Map repeat border reads with the gene space fasta reference.
 Step 6: Construct repeat copies.
 Step 7: Estimate age of the repeats.
 Step 8: Build summary report. 

 Input file is a file with 5 columns:
  -c1: sample_name
  -c2: file
  -c3: pair (permited values: S=Single, F=Forward, R=Reverse)
  -c4: insert_size
  -c5: sd_insert_size

 The following programs have to be in the PATH or be set up with enviromental
 variable.

 - BCalm2 ($BCALM2_PATH) (http://www.)
 - Repeatmasker ($REPMASKER_PATH) (http://www.repeatmasker.org/).
 - BWA ($BWA_PATH) (http://bio-bwa.sourceforge.net/).
 - Samtools ($SAMTOOLS_PATH) (http://samtools.sourceforge.net/).
 - Jellyfish ($JELLYFISH_PATH) (http://www.cbcb.umd.edu/software/jellyfish/).
 - Fastq-stats ($FASTQSTATS_PATH) (https://github.com/ExpressionAnalysis/).
 - Bedtools ($BEDTOOLS_PATH) (http://bedtools.readthedocs.io/en/latest/)

 Additionally the program will need BioPerl and the requeriments of the
 mentioned programs (e.g. RMBlast for Repeatmasker).

 

 The program will produce a file: "03_2_RepDenovoAnnotated.txt" with the 
 following columns (N depends of the number of groups):
   1- RepeatID (based in the REPdenovo analysis)
   2- RepeatClass (based in the RepeatMasker annotation)
   3- RepeatLength
   Na- Sample_CvMean (Mean coverage based in the REPdenovo analysis) 
   Nb- Sample_BPKM (Bases per 1Kb repeat size per 1M reads)
   Nc- Sample_EstCp (Estimated number of copies in the genome) 

=cut

=head1 AUTHORS

  Aureliano Bombarely.
  (aurebg@vt.edu).

=cut

=head1 METHODS

 RDS_GenomeExplorer


=cut

use strict;
use warnings;
use autodie;

use Getopt::Std;
use File::Spec;
use File::Basename;
use File::Copy;
use File::Path qw(make_path remove_tree);
use IPC::Cmd qw[can_run run];

use Bio::SeqIO;
use Math::BigFloat;

our ($opt_i, $opt_o, $opt_c, $opt_C, $opt_V, $opt_v, $opt_h);
getopts("i:o:c:CVvh");
if (!$opt_i && !$opt_o && !$opt_C && !$opt_V && !$opt_v && !$opt_h) {
    print "There are n\'t any tags. Print help\n\n";
    help();
}
if ($opt_h) {
    
    help();
}
elsif ($opt_v) {
    
    print STDERR "\nRDS_GenomeExplorer version:$version\n";
    print STDERR "Developed at the Bombarely Laboratory (2017-04-10)\n\n";
    exit(1);
}

###############################################################################
## Configuration file
###############################################################################
## The configuration file is a text file with different sections
## The program can print a template for the configuration file that
## can be latter on parsed to extract the data

my %fixed_config = ( 
    '00_global' => {
	'00_01_threads'               => ['numeric', 'optional', 1],
	'00_02_chloroplast_seqfile'   => ['file', 'optional', ''],
	'00_03_mitochondria_seqfile'  => ['file', 'optional', ''],
	'00_04_contaminant_seqfile'   => ['file', 'optional', ''],
	'00_05_estimated_genome_size' => ['nucleotide_size', 'optional', ''],
	'00_06_multikmer'             => {
	    '00_06_01_initial_kmer'       => ['numeric', 'optional', 15],
	    '00_06_02_steps_size'         => ['numeric', 'optional', 4],
	    '00_06_03_steps_number'       => ['numeric', 'optional', 5],
	},
	'00_07_kmers_filter'          => {
	    '00_07_00_dynamic_kmer_filter'=> ['boolean', 'optional', 1],
	    '00_07_01_kmer_meancov_fold'  => ['numeric', 'optional', 2],
	    '00_07_02_kmer_error_cutoff'  => ['numeric', 'optional', 3],
	    '00_07_03_kmer_repeat_cutoff' => ['numeric', 'optional', 10],
	},
    },
    '01_jellyfish_args'    => {
    },
    '02_bcalm_args'        => {
    },
    '03_repeatmasker_args' => {
    },
    );

## Additionally an extra hash with keep the descriptions

my %descr_config = (
    '00_global'                   => "Global arguments used by the script. They can be overwriten by the arguments specific for each section",
    '00_01_threads'               => "Number of threads used in each section (default=1)",
    '00_02_chloroplast_seqfile'   => "Fasta file with a close related chloroplast to the sample (or samples) analyzed. Used to detect NUPTs. (optional)",
    '00_03_mitochondria_seqfile'  => "Fasta file with a close related mitochondria to the sample (or samples) analyzed. Used to detect NUMTs. (optional)",
    '00_04_contaminant_seqfile'   => "Fasta file with contaminant sequences. Any read that maps with them, will be removed from the analysis. (optional)",
    '00_05_estimated_genome_size' => "Estimated genome size with the unit suffix such as Kb, Mb or Gb (e.g. 132Mb). (optional)",
    '00_06_multikmer'             => "Subsection to specify the multi-kmer steps (mandatory)",
    '00_06_01_initial_kmer'       => "Initial Kmer size (default=15)",
    '00_06_02_steps_size'         => "Size of the kmers (default=4)",
    '00_06_03_steps_number'       => "Number of increases/steps in the kmer analysis (default=5)",
    '00_07_kmers_filter'          => "Subsection to filter Kmer distributions (mandatory)",
    '00_07_00_dynamic_kmer_filter'=> "Boolean (TRUE/FALSE) to activate the kmer cutoffs for errors (first valley in the distribution) and repeats (00_07_01_repeat_meancov_fold) (optional)",
    '00_07_01_kmer_meancov_fold'  => "Minimum ocurrences/coverage used for the repetive elmenets based in the estimated genome coverage. For example, if the esxtimated genome coverage is 10 and this value is 2, the program will set the cutoff in 20 (optional, default=2)",
    '00_07_02_kmer_error_cutoff'  => "Minimum kmer ocurrence/coverage filtered out as sequencing errors (optional; default=3)",
    '00_07_03_kmer_repeat_cutoff' => "Minimum kmer ocurrence/coverage used to study repetive elements (optional; default=10)",
    '01_jellyfish_args'           => "Extra Jellyfish arguments. Arguments controling the output will be ignored. (optional)",
    '02_bcalm_args'               => "Extra BCalm arguments. Arguments controling the output will be ignored (optional)",
    '03_repeatmasker_args'        => "Extra RepeatMasker arguments. Arguments controling the output will be ignored (optional)",
    );

##############################################################################


if ($opt_C) {

    print_configfile(\%fixed_config, \%descr_config);
    print STDERR "\nConfiguration file has been created ";
    print STDERR "(RDS_GE.cfg)\n\n";
    exit();
}

my $date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## RDS_GenomeExplorer Starts ($date) ##\n";
print STDERR "############################################################\n\n";

## Define a variable to keep the stats;

my %gstats = ();

print_header("0) Checking arguments");

##############################################################################
## CHECK ARGUMENTS
##############################################################################

## Get the arguments and check them

my $infile = $opt_i || 
    die("\nINPUT ARG. ERROR: -i <input_list> argument was not supplied.\n\n");
print STDERR "\tInput filename:\t$infile\n";

## Check that the input file has the right number of columns

my %infiles = parse_input_list($infile);
print_input_report(\%infiles);
    
my $outbase = $opt_o || 
    die("\nINPUT ARG. ERROR: -o <out_basename> argument was not supplied.\n\n");
print STDERR "\n\tOutput basename:\t$outbase\n";

my $config_file = $opt_c ||
    die("\nINPUT ARG. ERROR: -c <config_file> arg. was not supplied.\n\n");
print STDERR "\tConfiguration file:\t$config_file\n";

my %configparam = parse_configuration($config_file, \%fixed_config);
#print_config_report(%configparam); 

## Check the executables

my %exepath = check_executables();


##############################################################################
## Create the output dir
##############################################################################

mkdir($outbase);






##############################################################################
## FINAL MESSAGE
##############################################################################

$date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## RepeatSpaceProfiler Ends ($date)   ##\n";
print STDERR "############################################################\n\n";
exit;


##############################################################################
##############################################################################
##
## FUNCTIONS
##
###############################################################################
## function to print the script help
###############################################################################

sub help {
  print STDERR <<EOF;
  $0:

   RDS_GenomeExplorer
   Pipeline to analyze the repeat profiling

   Usage:

     

    Description:
      
  
 
    Flags:

      -i <input_filelist>    input 5 columns file list (mandatory)
      -o <output_basedir>    name of the output directory (mandatory)
 
      -V <be_verbose>        be verbose and print the parsing status.
      -v <version>           print version
      -h <help>              print the help


EOF
exit (1);
}


##############################################################################
## Just a simple function to print a message with some format
##############################################################################

sub print_header {
    my $message = shift;

    my $date = `date`;
    chomp($date);

    print STDERR "\n";
    print STDERR "============================================================";
    print STDERR "\n $message ($date)\n";
    print STDERR "============================================================";
    print STDERR "\n\n";
}

###############################################################################
## check_executables
###############################################################################
## This function will use the PATH and the different ENV variables to check
## if the list of executables are available for this tool

sub check_executables {

    ## Executables are listed in this hash as specific PATH (keys) and 
    ## name of the command as array ref (values)

    my %exelist = (
	BCALM_PATH      => ['bcalm'],
	REPMASKER_PATH  => ['RepeatMasker'],
	BWA_PATH        => ['bwa'],
	SAMTOOLS_PATH   => ['samtools'],
	JELLYFISH_PATH  => ['jellyfish'],
	VELVET_PATH     => ['velveth'],
	FASTQSTATS_PATH => ['fastq-stats'],
	BEDTOOLS_PATH   => ['bedtools'],
	);

    ## Define the hash that it'll be fill with the executable path for these
    ## tools

    my %exepath = ();

    foreach my $exekey (sort(keys(%exelist))) {

	my @execitems = @{$exelist{$exekey}};
	foreach my $e_item (@execitems) {

	    if (exists $ENV{$exekey}) {

		## Print a message when the path is found for the executable
    
		print STDERR "\t$exekey PATH defined for $e_item executable\n";
		$exepath{$e_item} = File::Spec->catfile($ENV{$exekey}, $e_item);
	    }
	    else {

		## If no enviromental variable has been defined for the tool
		## check if it is in the PATH
    
		my $exepath = can_run($e_item);
		if ($exepath) {
		    
		    $exepath{$e_item} = $exepath;
		    print STDERR "\t$e_item is available for PATH ($exepath)\n";
		}
		else {
		    
		    ## If it is not found in the path either, just die

		    print STDERR "\nERROR: $e_item executable ($exekey ";
		    die("package) is not accessible.\n");
		}	   
	    }	
	}
    }
    
    return(%exepath);
}

##############################################################################
## parse_input_list
##############################################################################
##
## USAGE: my %infiles = parse_input_list($infile);
## DESCRIPTION: A function to parse the input files
## Input files are tabular files with the following columns
## -f1: sample_name (free) (e.g. Artha_COL)
## -f2: library_name (e.g. Artha_COL1)
## -f3: file_name (unique) (e.g. Artha_COL_R1.fq)
## -f4: library_type (S, PE, MP)
## -f5: library_file (S, F, R)
## -f6: insert_size (numeric)
## -f7: insert_size_sd (numeric)
##
## output hash structure will be:
## $SAMPLE_VALUE => { 
##        $LIB_NAME => { 
##             LIB_TYPE  => $LIB_TYPE_VALUE,
##             LIB_FILES => { $LIB_FILE_VALUE => $LIB_FILENAME },
##             LIB_STATS => { 
##                 INSERT_SIZE => $INSERT_SIZE_VALUE,
##                 INSERT_SIZE_SD => $INSERT_SIZE_SD_VALUE
##             }
##        }
##  }
##############################################################################

sub parse_input_list {

    my $file = shift(); 
    unless($file) {
    
	die("ERROR: No variable file was supplied to parse_input_list().\n\n");
    }

    my %perm_libtype = ( 'S' => 1, 'PE' => 2, 'MP' => 2 );
    my %perm_libfile = ( 'S' => 1, 'F'  => 1, 'R'  => 1 );

    my %infiles = ();
    my %filelist = (); 
    
    my $l = 0;
    open my $ifh, '<', $file;
    while(<$ifh>) {
    
	chomp($_);
	$l++;

	if ($_ =~ m/^.+/) {
	    my @cols = split(/\t/, $_);

	    unless (scalar(@cols) == 7) {
	
		die("PARSING ERROR: $file file, line $l dont have 7 columns\n");
	    }
	
	    my ($smp, $lib, $fname, $libtype, $libfile, $ins, $is_sd) = @cols;
	
	    ## Checks
	    ## 1- Is the file name unique?

	    if ($filelist{$fname}) {
	
		die("PARSING ERROR: filename:$fname is not unique.\n\n");
	    }
	    else {
		
		$filelist{$fname} = 1;
	    }
	    
	    ## 2- Does libtype have a permited value?
	    ## 3- Does lybfile have a permited value?

	    unless( exists $perm_libtype{$libtype} ) {
	
		die("PARSING ERROR: libtype=$libtype has non permited value\n");
	    }
	    unless( exists $perm_libfile{$libfile} ) {
	
		die("PARSING ERROR: libfile=$libfile has non permited value\n");
	    }

	    ## Add the info to the file

	    unless( exists $infiles{$smp} ) {
		
		$infiles{$smp} = {
		    $lib => {
			LIB_TYPE  => $libtype,
			LIB_FILES => { $libfile => $fname },
			LIB_STATS => { 
			    INSERT_SIZE    => $ins,
			    INSERT_SIZE_SD => $is_sd 
			}
		    }
		}
	    }
	    else {
	
		## Only the filename should be added, the rest of the 
		## information should be the same. The program will assume 
		## that it is the same

		unless ($infiles{$smp}->{$lib}) {
		
		    $infiles{$smp}->{$lib} = {
			LIB_TYPE  => $libtype,
			LIB_FILES => { $libfile => $fname },
			LIB_STATS => { 
			    INSERT_SIZE    => $ins,
			    INSERT_SIZE_SD => $is_sd 
			}
		    }
		}
		else {

		    $infiles{$smp}->{$lib}->{LIB_FILES}->{$libfile} = $fname;
		}
	    }
	}
    }
    return(%infiles); 
}

##############################################################################
## print_input_report
##############################################################################
##
## USAGE: print_input_report(\%infiles);
## DESCRIPTION: A function to print a report of the input files
##
##############################################################################

sub print_input_report {

    my $infile_href = shift;
    
    unless ($infile_href) {
    
	die("ERROR: No infiles href was suplied to print_input_report().\n"); 
    }

    my ($s, $tl) = (0, 0);
    
    foreach my $smp (sort keys %{$infile_href}) {
    
	$s++;
	my %libs = %{$infile_href->{$smp}};
	my $n = scalar(keys(%libs)); 
	my $l = 0;
	
	my $test = join(" ", values(%libs));

	print STDERR "\t- Sample $s: $smp with $n libraries\n";
	foreach my $lib (sort keys %libs) {

	    my $libtype = $libs{$lib}->{LIB_TYPE};
	    my $ins = $libs{$lib}->{LIB_STATS}->{INSERT_SIZE};
	    my $ins_sd = $libs{$lib}->{LIB_STATS}->{INSERT_SIZE_SD};

	    print STDERR "\n\t\tLibrary: $lib is a $libtype type library\n";
	    print STDERR "\t\tInsert_Size: $ins +/- $ins_sd\n";

	    foreach my $lf (sort(keys %{$libs{$lib}->{LIB_FILES}})) {

		my $filename = $libs{$lib}->{LIB_FILES}->{$lf};
		print STDERR "\t\t\t$lf => $filename\n";
	    }
	}
    }
} 

###############################################################################
## parse_configuration
###############################################################################
##
## USAGE: my %configparam = parse_configuration($config_file, \%fixed_config);
## DESCRIPTION: This function parse the configuration file checking the 
##              the variables based on the fixed_configuration file.

sub parse_configuration {

    my $cfg_file = shift;
    my $fixed_cfg_href = shift;

    my %fxcfg = %{$fixed_cfg_href};
   
    ## Transform the hash with the requirements
    my %requ = ();
    foreach my $key (sort(keys(%fxcfg))) {
    
	if (ref($fxcfg{$key}) eq 'HASH') {
	
	    foreach my $kkey (sort(keys(%{$fxcfg{$key}}))) {
	    
		if (ref($fxcfg{$key}->{$kkey}) eq 'HASH') {
	
		    foreach my $kkkey (sort(keys(%{$fxcfg{$key}->{$kkey}}))) {
	    
			$requ{$kkkey} = $fxcfg{$key}->{$kkey}->{$kkkey}->[0];
		    }
		}
		elsif (ref($fxcfg{$key}->{$kkey}) eq 'ARRAY') {
		    
		    $requ{$kkey} = $fxcfg{$key}->{$kkey}->[0];
		}
	    }
	}
	elsif (ref($fxcfg{$key}) eq 'ARRAY') {
	
	    $requ{$key} = $fxcfg{$key}->[0];
	}
    }


    my %cfg = ();
    my $l = 0;
    open my $cfg_fh, '<', $cfg_file;
    while(<$cfg_fh>) {
    
	chomp($_); 
	$l++; 

	## Ignore comments
	if ($_ !~ m/^\s*#/) {
	
	    ## Remove the first spaces
	    $_ =~ s/^\s+//;

	    ## Parse the line. It will have the structure 
	    ## key [] = something or key:

	    if ($_ =~ m/^(\w+):/) {

		my $section = $1;
	    }
	    elsif ($_ =~ m/^(\w+)\s+\[(\w+)\]=(.+)$/) {

		my $arg = $1;
		my $req = $2;
		my $val = $3;

		$cfg{$arg} = $val;

		if (exists $requ{$arg}) {
		
		    if ($requ{$arg} eq 'numeric' && $val !~ m/^\d+$/) {
			
			print STDERR "\nERROR: value ($val) for argument ";
			die("$arg, line $l should have numeric value\n\n"); 
		    }
		    elsif ($requ{$arg} eq 'file' && !-e $val) {
		    
			print STDERR "\nERROR: file=$val for argument $arg at ";
			die("line $l does not exist.\n\n"); 
		    }
		    elsif ($requ{$arg} eq 'nucleotide_size') {
		    
			if ($val =~ m/^(\d+)([a-z]+)$/i) {
			
			    my $size = $1;
			    my $unit = lc($2);
			    
			    my %perm_units = ( 
				'gb' => 1000000000,
				'mb' => 1000000,
				'kb' => 1000,
				'bp' => 1
				);
			    unless (exists $perm_units{$unit}) {
			    
				print STDERR "\nERROR: units used for genome ";
				die("size are not gb, mb, kb or bp.\n\n"); 
			    }
			}
			else {

			    print STDERR "\nERROR: value ($val) for argument ";
			    die("$arg, doesnt have nucl size format\n\n");
			}
		    }
		}
		else {
		
		    print STDERR "\nERROR: Argument $arg at line $l for ";
		    die("$cfg_file is not a real argument.\n\n");
		}				
	    }
	}	
    }


    return %cfg;
}



###############################################################################
## print_config_report
###############################################################################
## 
## USAGE: print_config_report(%configparam);


###############################################################################
## print_configfile()
###############################################################################
##
## USAGE: print_configfile()
## DESCRIPTION: print the configuration file
##

sub print_configfile {

    my $fixed_config_href = shift;
    my $descr_config_href = shift;
    my %descr = %{$descr_config_href};

    ## Define the sections into a hash

    ## Open the file to write the variables
    my $filename = "RDS_GE.cfg";
    open my $fh, '>', $filename;

    foreach my $k (sort(keys(%{$fixed_config_href}))) {
    
	my %subcfg = %{$fixed_config_href->{$k}};

	my $pr1 = join("\n## ", ( $descr{$k} =~ m/.{1,90}/g ));
	print $fh "## $pr1\n";
	print $fh "$k:\n";
		
	foreach my $subk (sort(keys(%subcfg))) {
	
	    my $pr2 = join("\n\t## ", ($descr{$subk} =~ m/.{1,90}/g));
	    print $fh "\t## $pr2\n";

	    if (ref($subcfg{$subk}) eq "HASH") {
	    		
		print $fh "\t$subk:\n";
		
		my %lv3cfg = %{$subcfg{$subk}};
		foreach my $lv3k (sort(keys(%lv3cfg))) {
		
		    my $p3 = join("\n\t\t## ", ($descr{$lv3k} =~ m/.{1,90}/g));
		    print $fh "\t\t## $p3\n";
		    print $fh "\t\t$lv3k [$lv3cfg{$lv3k}->[0]]=";
		    print $fh "$lv3cfg{$lv3k}->[2]\n";		    
		}
	    }
	    else {
	    
		print $fh "\t$subk [$subcfg{$subk}->[0]]=$subcfg{$subk}->[2]\n";
	    }
	}    
    }
}
