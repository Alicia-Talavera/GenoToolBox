#!/usr/bin/perl

=head1 NAME

 RepeatSpaceProfiler
 Pipeline to analyze the repeat profiling

=cut

our $version = '0.1.0';

=head1 SYPNOSIS

 RepeatSpaceProfiler [-h] -i <input_filelist> -o <output_basedir> 
                          -r <repdenovo_config> -g <gene_space_fastaref>
                          -s <genome_size_mb>
                          [-n <sample_names>]
                          [-m <repeatmasker_args>]
                          [-t <threads>] [-W]

=head2 I<Flags:>

=over


=item -i

B<input_filelist>         input 4 columns file list (mandatory)

=item -o

B<output_basedir>         name of the output directory (mandatory)

=item -r

B<REPdenovo_config>       REPdenovo configuration file (mandatory)

=item -g

B<gene_space_fastaref>    Fasta file with the gene space (mandatory)

=item -s

B<genome_size>            Estimated genome size as kb, mb or gb (mandatory)

=item -n

B<sample_name>            String with group=sample_name sep. by , (optional)

=item -m

B<Repeatmasker_args>      Repeatmasker arguments separated by comma (optional)

=item -t

B<threads>                Number of threads to run the process (optional)

=item -W

B<rewrite_REPdenovo>      Rewrite REPdenovo config file (optional)

=item -V

B<be_verbose>             be verbose and print the parsing status.

=item -v

B<version>                print version

=item -h

B<help>                   print the help

=back

=cut

=head1 DESCRIPTION

 This program run several tools to analyze the repeat profile of a genome 
 based in unassembled short reads in several steps:

 Step 1: Get the stats of the input fastq input files.
 Step 2: Get the de-novo repeats using REPdenovo.
 Step 3: Annotate the de-novo repeats using RepeatMasker.
 Step 4: Get the repeat borders.
 Step 5: Map repeat border reads with the gene space fasta reference.
 Step 6: Construct repeat copies.
 Step 7: Estimate age of the repeats.
 Step 8: Build summary report. 

 The following programs have to be in the PATH or be set up with enviromental
 variable.

 - REPdenovo ($REPDENOVO_PATH) (https://github.com/Reedwarbler/REPdenovo).
 - Repeatmasker ($REPMASKER_PATH) (http://www.repeatmasker.org/).
 - BWA ($BWA_PATH) (http://bio-bwa.sourceforge.net/).
 - Samtools ($SAMTOOLS_PATH) (http://samtools.sourceforge.net/).
 - Jellyfish ($JELLYFISH_PATH) (http://www.cbcb.umd.edu/software/jellyfish/).
 - Velvet ($VELVET_PATH) (https://www.ebi.ac.uk/~zerbino/velvet/).
 - TERefiner_1 ($REFINER_PATH) (included REPdenovo package).
 - ContigsMerger ($CONTIGS_MERGER_PATH) (included REPdenovo package).  
 - Fastq-stats ($FASTQSTATS_PATH) (https://github.com/ExpressionAnalysis/).

 Additionally the program will need BioPerl and the requeriments of the
 mentioned programs (e.g. RMBlast for Repeatmasker).

 REPdenovo configuration file has several variables that could be rewriten by 
 the previous enviromental variables (e.g. VELVET_PATH), including THREADS 
 (with option -t) in case that you do not know where are the executables.
 To re-write them use option -W.  

 Option -s is used to estimate genome coverage. It needs the units (e.g. kb,
 mb or gb).

 Sample names can be used to identify the files supplied in the input file 
 (-i). Samples will be cluster by group number, so for example if you are using
 three samples, six files in the input file, with three groups, you can tag 
 them using -n '1=SampleA,2=SampleB,3=SampleC'.


=cut

=head1 AUTHORS

  Aureliano Bombarely.
  (aurebg@vt.edu).

=cut

=head1 METHODS

 RepeatSpaceProfiler


=cut

use strict;
use warnings;
use autodie;

use Getopt::Std;
use File::Spec;
use File::Basename;
use File::Copy;
use File::Path qw(make_path remove_tree);
use IPC::Cmd qw[can_run run];

use Bio::SeqIO;
use Math::BigFloat;

our ($opt_i, $opt_o, $opt_r, $opt_g, $opt_s, $opt_n, $opt_m, $opt_t, $opt_W, 
     $opt_V, $opt_v, $opt_h);
getopts("i:o:r:g:s:n:m:t:WVvh");
if (!$opt_i && !$opt_o && !$opt_r && !$opt_g && !$opt_s && !$opt_m && !$opt_n 
    && !$opt_t && !$opt_W && !$opt_V && !$opt_v && !$opt_h) {
    print "There are n\'t any tags. Print help\n\n";
    help();
}
if ($opt_h) {
    help();
}
elsif ($opt_v) {
    print STDERR "\nGenomeRepProfiler version:$version\n";
    print STDERR "Developed at the Bombarely Laboratory (2017-04-10)\n\n";
    exit(1);
}

my $date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## GenomeRepProfiler Starts ($date) ##\n";
print STDERR "############################################################\n\n";

## Define a variable to keep the stats;

my %gstats = ();

print_header("0) Checking arguments");

##############################################################################
## CHECK ARGUMENTS
##############################################################################

## Get the arguments and check them

my $infile = $opt_i || 
    die("\nINPUT ARG. ERROR: -i <input_list> argument was not supplied.\n\n");

## Check that the input file has the right number of columns

my %infiles = ();
my %gpnames = (); 

open my $infh, '<', $infile;
my $n = 0;
while(<$infh>) {
    chomp($_); 
    $n++;
    my @line = split(/\t/, $_);
    if (scalar(@line) != 4) {
    
	die("ERROR: Line $n for file $infile do not have 4 columns.\n\n"); 
    }
    $infiles{$n} = {
	'file'           => $line[0],
	'group'          => $line[1],
	'insert_size'    => $line[2],
	'sd_insert_size' => $line[3],
    };

    $gpnames{$line[1]} = $line[1];
}

if ($opt_n) {

    ## Parse the line
    my @snames = split(/,/, $opt_n);
    if (scalar(@snames) != scalar(keys(%gpnames))) {
    
	die("ERROR: -n <sample> names is not the same than groups at $opt_i\n");
    }
    
    foreach my $sname (@snames) {

	my @sitems = split(/=/, $sname);
	unless (exists $gpnames{$sitems[0]}) {
	
	    die("ERROR: group $sitems[0] from -n dont exist at -i $opt_i\n");
	}
	else {
	
	    print STDERR "\t\tSample $sitems[1] linked to group $sitems[0]\n";
	    $gpnames{$sitems[0]} = $sitems[1];
	}
    }
} 


print STDERR "\tInput file list:\t$infile with $n files\n";

my $outbase = $opt_o || 
    die("\nINPUT ARG. ERROR: -o <out_basename> argument was not supplied.\n\n");
print STDERR "\tOutput basename:\t$outbase\n";

my $repnovo_conf = $opt_r ||
    die("\nINPUT ARG. ERROR: -r <REPdenovo_config> arg. was not supplied.\n\n");
print STDERR "\tREPdenovo configuration file:\t$repnovo_conf\n";

my $threads = 4;
if ($opt_t) {

    if ($opt_t =~ m/^\d+$/) {
    
	$threads = $opt_t;
    }
    else {
    
	die("ERROR: -t <threads> argument is not numeric ($opt_t).\n\n");
    }
}
print STDERR "\tNumber of threads:\t$threads\n";

my $genspa_fasta = $opt_g ||
    die("\nINPUT ARG. ERROR: -g <gene_space_fasta> arg. was not supplied.\n\n");
print STDERR "\tGene Space fasta:\t$genspa_fasta\n";

my $gsize = $opt_s ||
    die("\nINPUT ARG. ERROR: -s <genome_size_mb> arg. was not supplied.\n\n");

if ($gsize =~ m/^(\d+)(\w+)$/) {

    my $int = $1;
    my $units = lc($2);

    my %perm_units = ( 'kb' => 1000, 'mb' => 1000000, 'gb' => 1000000000); 
    unless (exists $perm_units{$units}) {

	die("\nERROR: units used with -s $gsize are not kb, mb or gb\n");
    }

    $gsize = $int * $perm_units{$units};
}

my %repmask_permarg = ( 
    '-engine' => 1, '-pa' => 1, '-s' => 1, '-q' => 1, '-qq' => 1, '-nolow' => 1,
    '-low' => 1, '-noint' => 1, '-int' => 1, '-norna' => 1, '-alu' => 1, 
    '-div' => 1, '-lib' => 1, '-cutoff' => 1, '-species' => 1, '-is_only' => 1,
    '-is_clip' => 1, '-no_is' => 1, '-gc' => 1, '-gccalc' => 1, '-frag' => 1, 
    '-nocut' => 1, '-noisy' => 1, '-nopost' => 1, '-dir' => 1, 
    '-alignments' => 1, '-inv' => 1, '-lcambig' => 1, '-small' => 1, 
    '-xsmall' => 1, '-x' => 1, '-poly' => 1, '-source' => 1, '-html' => 1, 
    '-ace' => 1, '-gff' => 1, '-u' => 1, '-xm' => 1, '-no_id' => 1, 
    '-excln' => 1
);

my @repmask_args = ();
if ($opt_m) {
    
    foreach my $repmask_arg (split(/,/, $opt_m)) {

	my @pairs = split(/=/, $repmask_arg); 
	unless ($repmask_permarg{$pairs[0]}) {
	
	    print STDERR "\n\tWARNING: $pairs[0] is not a RepeatMasker ";
	    print STDERR "argument. Ignoring argument.\n";
	}
	else {
	
	    push(@repmask_args, join(" ", @pairs));
	}
    } 
}
my $count_repmask_args = scalar(@repmask_args); 
print STDERR "\tInput RepeatMasker arguments:\n";
foreach my $repmk_arg (@repmask_args) {
    print STDERR "\t\tArgument:\t$repmk_arg\n";
}

## Check the executables

my %exec_list = (
    REPDENOVO_PATH  => ['ContigsMerger', 'TERefiner_1', 'main.py'],
    REPMASKER_PATH  => ['RepeatMasker'],
    BWA_PATH        => ['bwa'],
    SAMTOOLS_PATH   => ['samtools'],
    JELLYFISH_PATH  => ['jellyfish'],
    VELVET_PATH     => ['velveth'],
    FASTQSTATS_PATH => ['fastq-stats']
    );

my %exepath = ();

foreach my $exec_key (sort keys %exec_list) {

    my @execitems = @{$exec_list{$exec_key}};
    foreach my $e_item (@execitems) {

	if (exists $ENV{$exec_key}) {
    
	    print STDERR "\t$exec_key PATH defined for $e_item executable\n";
	    $exepath{$e_item} = File::Spec->catfile($ENV{$exec_key}, $e_item);
	}
	else {
    
	    my $exe_path = can_run($e_item);
	    if ($exe_path) {
		
		$exepath{$e_item} = $exe_path;
		print STDERR "\t$e_item is available in the PATH ($exe_path)\n";
	    }
	    else {
		
		print STDERR "\nERROR: $e_item executable ($exec_key package)";
		die(" is not accessible.\n");
	    }	   
	}	
    }
}



##############################################################################
## Get the stats
##############################################################################

## Create the output dir

mkdir($outbase);

print_header("1) Getting Stats of the Input Fastq Files");

my $instatsdir = File::Spec->catfile($outbase, "01_0_FastqInputStats");
mkdir($instatsdir);

my %filestats = ();
my %totalstats = ( reads => 0, total_bases => 0 ); 

foreach my $infile_idx (sort(keys(%infiles))) {

    my $filename = $infiles{$infile_idx}->{file};
    
    ## Remove the extension
    my $basename = basename($filename);
    $basename =~ s/\.\w+$//;
    my $statsname = $basename . ".stats.txt";
    my $fullstatsname = File::Spec->catfile($instatsdir, $statsname);

    my @stats_cmd = ($exepath{'fastq-stats'}, $filename, '>', $fullstatsname);
    my $stats_cmd = join(" ", @stats_cmd);

    my @run01stats = run( command => $stats_cmd, verbose => $opt_V );

    ## Now it will parse the files and add the stats to a hash
    
    my %statsperfile = ( file => $fullstatsname );

    open my $stats_fh, '<', $fullstatsname;
    while(<$stats_fh>) {

	chomp($_);
	
	## Replace some line to be able to get a field
	$_ =~ s/len mean/len_mean/;
	$_ =~ s/len stdev/len_stdev/;
	$_ =~ s/len min/len_min/;
	$_ =~ s/unique-dup deq/unique-dup_seq/;
	$_ =~ s/min dup count/min_dup_count/;
	$_ =~ s/^dup seq\s+/dup_seq_/;
	$_ =~ s/^dup /dup_/;
	$_ =~ s/^qual /qual_/;
	$_ =~ s/total bases/total_bases/;

	my @line = split(/\t/, $_);
	my $id = shift(@line);
	my $datarest = join(",", @line);
	$statsperfile{$id} = $datarest;	
    }

    $totalstats{reads} += $statsperfile{reads};
    $totalstats{total_bases} += $statsperfile{total_bases};

    $filestats{$infile_idx} = \%statsperfile;
}

my $avg_read_length =  $totalstats{total_bases} / $totalstats{reads};
my $est_coverage = $totalstats{total_bases} / $gsize;
print STDERR "\n\t\tTOTAL READS:\t$totalstats{reads}\n";
print STDERR "\t\tTOTAL BASES:\t$totalstats{total_bases}\n";
print STDERR "\t\tAVERAGE READ LENGTH:\t$avg_read_length\n";
print STDERR "\t\tESTIMATED_COVERAGE:\t$est_coverage\n";


##############################################################################
## Run REPdenovo
##############################################################################

print_header("2) Running REPdenovo");

print STDERR "\t2.1- Checking the configuration file.\n";

## Required fields will have default variables

my %reqfields = (
    'MIN_REPEAT_FREQ'        => 10,
    'RANGE_ASM_FREQ_DEC'     => 2,
    'RANGE_ASM_FREQ_GAP'     => 0.8,
    'K_MIN'                  => 30,
    'K_MAX'                  => 50,
    'K_INC'                  => 10,
    'K_DFT'                  => 30,
    'READ_LENGTH'            => 100,
    'GENOME_LENGTH'          => '',
    'MIN_CONTIG_LENGTH'      => '',
    'ASM_NODE_LENGTH_OFFSET' => -1,
    'IS_DUPLICATE_REPEATS'   => 0.85,
    'COV_DIFF_CUTOFF'        => 0.5,
    'MIN_SUPPORT_PAIRS'      => 20,
    'MIN_FULLY_MAP_RATIO'    => 0.2,
    'TR_SIMILARITY'          => 0.85,
    'TREADS'                 => 50,
    'BWA_PATH'               => 'GLOBAL',
    'SAMTOOLS_PATH'          => 'GLOBAL',
    'JELLYFISH_PATH'         => 'GLOBAL',
    'VELVET_PATH'            => 'GLOBAL',
    'REFINER_PATH'           => 'GLOBAL',
    'CONTIGS_MERGER_PATH'    => 'GLOBAL',
    'OUTPUT_FOLDER'          => '',
    'VERBOSE'                => 1
    );

my @sortrepfields = ('MIN_REPEAT_FREQ', 'RANGE_ASM_FREQ_DEC', 
		     'RANGE_ASM_FREQ_GAP', 'K_MIN', 'K_MAX', 'K_INC', 'K_DFT', 
		     'READ_LENGTH', 'GENOME_LENGTH', 'MIN_CONTIG_LENGTH', 
		     'ASM_NODE_LENGTH_OFFSET', 'IS_DUPLICATE_REPEATS', 
		     'COV_DIFF_CUTOFF', 'MIN_SUPPORT_PAIRS', 
		     'MIN_FULLY_MAP_RATIO', 'TR_SIMILARITY', 'TREADS', 
		     'BWA_PATH', 'SAMTOOLS_PATH', 'JELLYFISH_PATH', 
		     'VELVET_PATH', 'REFINER_PATH', 'CONTIGS_MERGER_PATH', 
		     'OUTPUT_FOLDER', 'VERBOSE');

## Aditionally some of the PATH will look for a tools name
my %eqtoolname = (
    'SAMTOOLS_PATH'          => 'samtools',
    'JELLYFISH_PATH'         => 'jellyfish',
    'VELVET_PATH'            => 'velveth',
    'REFINER_PATH'           => 'TERefiner_1',
    'CONTIGS_MERGER_PATH'    => 'ContigsMerger',
    'BWA_PATH'               => 'bwa',
    );

my %rp_checks = ();
open my $rdncfg_fh, '<', $repnovo_conf;
while(<$rdncfg_fh>) {

    chomp($_);
    my @line = split(/\s+/, $_);
    $rp_checks{$line[0]} = $line[1];
}

## Now will check that all the required fields are there

foreach my $req_repfields (sort(keys(%reqfields))) {

    unless (exists $rp_checks{$req_repfields}) {
    
	die("ERROR: $req_repfields do not exists in the file: $repnovo_conf\n");
    }
}

## If option -W is enabled, will overwrite the file with new data

my $repout_dir = File::Spec->catfile($outbase, "02_1_RepDenovo_out");

my %fullpathnames = (
    'REFINER_PATH'        => 1,
    'CONTIGS_MERGER_PATH' => 1,
    'SAMTOOLS_PATH'       => 1
    );


if ($opt_W) {

    $repnovo_conf = File::Spec->catfile($outbase, "02_0_RepDenovo.cfg");
    print STDERR "\n\tREWRITING a new RepDenovo config. file: $repnovo_conf\n";
    
    ## The PATH for the REPdenovo configuration file could be tricky
    ## Some of the paths, such as samtools requires the whole path
    ## meanwhile others such as Velvet does not. Additionally some
    ## of them work better with GLOBAL. For executables in the PATH
    ## the program will replace them by GLOBAL
    
    my %global_path = ();
    foreach my $gpath (split(/:/, $ENV{PATH})) {
	
	$global_path{$gpath} = 1;
    }

    open my $rp_fh, '>', $repnovo_conf;

    foreach my $repfield (@sortrepfields) {
    
	if ($repfield =~ m/PATH/) {

	    my $dirpath = dirname($exepath{$eqtoolname{$repfield}});
	    
	    if (exists $global_path{$dirpath}) {
	    
		print $rp_fh "$repfield\tGLOBAL\n";
	    }
	    else {

		if (exists $fullpathnames{$repfield}) {

		    my $new_path = $exepath{$eqtoolname{$repfield}};
		    print $rp_fh "$repfield\t$new_path\n";
		}
		else {

		    print $rp_fh "$repfield\t$dirpath\n";
		}
	    }
	}
	elsif ($repfield =~ /TREADS/) {
	
	    print $rp_fh "$repfield\t$threads\n";
	}
	elsif ($repfield =~ /READ_LENGTH/) {
	
	    ## Read length has to be multiple of 10
	    my $int = Math::BigFloat->new($avg_read_length);
	    my $round_int = $int->bfround(2)->bstr();

	    print $rp_fh "$repfield\t$round_int\n";
	}
	elsif ($repfield =~ /GENOME_LENGTH/) {

	    print $rp_fh "$repfield\t$gsize\n";
	}
	elsif ($repfield =~ /OUTPUT_FOLDER/) {
	
	    print $rp_fh "$repfield\t$repout_dir\n";
	}
	else {
	
	    print $rp_fh "$repfield\t$rp_checks{$repfield}\n";
	}
    }
}
else {

    ## If the option -W is not active it will overwrite the $repout_dir
    ## with the parse information from the config file

    $repout_dir = $rp_checks{OUTPUT_FOLDER};

}

print STDERR "\tREPdenovo OUTPUT_FOLDER:\t$repout_dir\n\n";

## Now it will run REPdenovo

print STDERR "\t2.2- Running REPdenovo.\n\n";

my @repdenovo_cmd = ("python", $exepath{'main.py'}, '-c', 'All');
push @repdenovo_cmd, ("-g", "$repnovo_conf");
push @repdenovo_cmd, ("-r", "$infile");
my $repdenovo_cmd = join(" ", @repdenovo_cmd);  

my @run02repdenovo = run( command => $repdenovo_cmd, verbose => $opt_V );

print STDERR "\t2.3- Parsing REPdenovo output\n\n";

## REPdenovo produces basically three important files
## 1- contigs.fa with all the predicted repeats.
## 2- X_contig_pairs_info.txt_cov_info_with_cutoff.txt
## 3- contigs.fa_X.sort.bam with the read remap to the contig.fa
## X will be GroupN - 1

my $repcontigs_file = File::Spec->catfile($repout_dir, 'contigs.fa');
my %repcov4smp = ();
my %repbam4smp = ();

foreach my $gp (sort (keys %gpnames)) {

    my $idx = $gp - 1;
    my $suffix1 = "_contig_pairs_info.txt_cov_info_with_cutoff.txt"; 
    my $base_ctg_cov = join("_", ($idx, $suffix1));
    my $ctg_cov = File::Spec->catfile($repout_dir, $base_ctg_cov);

    my %covdata = ();
    open my $covfh, '<', $ctg_cov;
    while(<$covfh>) {

	chomp($_);
	my @line = split(/\s+/, $_); 
	my $repID = shift(@line);
	$covdata{$repID} = { 'RepeatLE' => $line[0], 'RepeatCV' => $line[1] };
    }
    $repcov4smp{$gp} = \%covdata;
    my $bamname = join("_", ('contigs.fa', join(".", ($idx, "sort.bam"))));
    $repbam4smp{$gp} = File::Spec->catfile($repout_dir, $bamname);
}

my $rep_number = `grep -c ">" $repcontigs_file`;
chomp($rep_number); 
print STDERR "\n\tREPdenovo has produced $rep_number repeats.\n";


##############################################################################
## FINAL MESSAGE
##############################################################################

$date = `date`;
chomp($date);
print STDERR "\n\n############################################################";
print STDERR "\n## RepeatSpaceProfiler Ends ($date)   ##\n";
print STDERR "############################################################\n\n";
exit;


##############################################################################
##############################################################################
##
## FUNCTIONS
##
###############################################################################
## function to print the script help
###############################################################################

sub help {
  print STDERR <<EOF;
  $0:

   RepeatSpaceProfiler
   Pipeline to analyze the repeat profiling




=head2 I<Flags:>                 

    Usage:

      RepeatSpaceProfiler [-h] -i <input_filelist> -o <output_basedir> 
                          -r <repdenovo_config> -g <gene_space_fastaref>
                          -g <genome_size>
                          [-s <sample_name>]
			  [-m <repeatmasker_args>]
                          [-t <threads>] [-W]

    Description:
      
      This program run several tools to analyze the repeat profile of a genome 
      based in unassembled short reads in several steps:

       Step 1: Get the stats of the input fastq input files.
       Step 2: Get the de-novo repeats using REPdenovo.
       Step 3: Annotate the de-novo repeats using RepeatMasker.
       Step 4: Get the repeat borders.
       Step 5: Map repeat border reads with the gene space fasta reference.
       Step 6: Construct repeat copies.
       Step 7: Estimate age of the repeats.
       Step 8: Build summary report. 

      The following programs have to be in the PATH or be set up with 
     enviromental variables.

      - REPdenovo (\$REPDENOVO_PATH) (https://github.com/Reedwarbler/REPdenovo).
      - Repeatmasker (\$REPMASKER_PATH) (http://www.repeatmasker.org/).
      - BWA (\$BWA_PATH) (http://bio-bwa.sourceforge.net/).
      - Samtools (\$SAMTOOLS_PATH) (http://samtools.sourceforge.net/).
      - Jellyfish (\$JELLYFISH_PATH) (http://www.cbcb.umd.edu/software).
      - Velvet (\$VELVET_PATH) (https://www.ebi.ac.uk/~zerbino/velvet/).
      - TERefiner_1 (\$REFINER_PATH) (included REPdenovo package).
      - ContigsMerger (\$CONTIGS_MERGER_PATH) (included REPdenovo package).  
      - Fastq-stats (\$FASTQSTATS_PATH) (https://github.com/ExpressionAnalysis).

     Additionally the program will need BioPerl and the requeriments of the
     mentioned programs (e.g. RMBlast for Repeatmasker).

     REPdenovo configuration file has several variables that could be rewriten 
     by the previous enviromental variables (e.g. VELVET_PATH), including 
     THREADS (with option -t) in case that you do not know where are the 
     executables. To re-write them use option -W.  

     Option -s genome_size_mb is used to estimate coverage.

      Sample names can be used to identify the files supplied in the input file 
      (-i). Samples will be cluster by group number, so for example if you are 
      using three samples, six files in the input file, with three groups, 
      you can tag them using -n '1=SampleA,2=SampleB,3=SampleC'.
 
    Flags:

      -i <input_filelist>    input 4 columns file list (mandatory)
      -o <output_basedir>    name of the output directory (mandatory)
      -r <REPdenovo_config>  REPdenovo configuration file (mandatory)
      -g <gene_space_ref>    Fasta file with the gene space (mandatory)
      -s <genome_size>       Estimated genome size kb,mb or gb (mandatory)
      -s <sample_name>       Sample name as group=name sep. by , (optional)
      -m <Repeatmasker_args> Repeatmasker args separated by comma (optional)
      -t <threads>           Number of threads to run the process (optional)
      -W <rewrite_REPdenovo> Rewrite REPdenovo config file (optional)
      -V <be_verbose>        be verbose and print the parsing status.
      -v <version>           print version
      -h <help>              print the help


EOF
exit (1);
}


##############################################################################
## Just a simple function to print a message with some format
##############################################################################

sub print_header {
    my $message = shift;

    my $date = `date`;
    chomp($date);

    print STDERR "\n";
    print STDERR "============================================================";
    print STDERR "\n $message ($date)\n";
    print STDERR "============================================================";
    print STDERR "\n\n";
}

